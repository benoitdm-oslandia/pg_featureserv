stages:

  - üêç lint
  - ü§û test
  - üì¶ build
  - üöÄ deploy

variables:
  PROJECT_FOLDER: "pg_featureserv"
  REPO_PLUGIN_URL: "https://git.oslandia.net/Client-projects/geoplateforme-ign-pg-featureserv"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
  POSTGRES_VERSION: "13"
  POSTGIS_VERSION: "3.2"
  GO_VERSION: "1.19"


# ======================================================================================
# -- CONTAINERS JOBS -------------------------------------------------------------------
# ======================================================================================



# ======================================================================================
# -- LINT JOBS -------------------------------------------------------------------------
# ======================================================================================

include:
  - template: Code-Quality.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml

sast:
  tags:
    - docker
  stage: üêç lint

code_quality:
  tags:
    - linux_vm
  stage: üêç lint

go-linter:
  tags:
    - docker
  stage: üêç lint
  image: "golang:1.18"
  only:
    refs:
      - merge_requests
      - main
      - develop
    changes:
      - "**/*.go"
      - "**/go.mod"
      - "**/go.sum"
      - ".gitlab-ci.yml"
  before_script:
    - apt-get update && apt-get install -y pre-commit curl
    - pre-commit install --install-hooks
    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.49.0
  script:
    - pre-commit run -a -v



# ======================================================================================
# -- TEST JOBS -------------------------------------------------------------------------
# ======================================================================================

# -- GO TEST
go-test-unit:
  tags:
    - docker
  stage: ü§û test
  variables:
      POSTGRES_DB: pg_featureserv
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgis/${POSTGRES_DB}"
  parallel:
    matrix:
      - GO_VERSION: "1.13"
      - GO_VERSION: "1.16"
      - GO_VERSION: "1.18"
      - GO_VERSION: "1.19"
  image: "golang:${GO_VERSION}"
  services:
    - name: postgis/postgis:${POSTGRES_VERSION}-${POSTGIS_VERSION}-alpine
      alias: postgis
  only:
    refs:
      - merge_requests
      - main
      - develop
    changes:
      - "**/*.go"
      - "**/go.mod"
      - "**/go.sum"
      - ".gitlab-ci.yml"

  before_script:
    - go get github.com/boumenot/gocover-cobertura
    - go install github.com/boumenot/gocover-cobertura

  script:
    # run test:
    - PKGS=$(go list ./... | grep -v /vendor/)
    - DEPS=$(go list ./... | grep -v vendor | grep -v test | xargs | sed 's/ /,/g')
    - |
       go test ${PKGS} -v \
       -coverprofile=coverage_${GO_VERSION}.out \
       -covermode=count \
       -coverpkg ${DEPS}
    # generate report:
    - go run github.com/boumenot/gocover-cobertura < coverage_${GO_VERSION}.out > coverage-unit_${GO_VERSION}.xml
    # compute valid coverage total:
    - go tool cover -func=coverage_${GO_VERSION}.out

  artifacts:
    when: always
    paths:
      - coverage-unit_${GO_VERSION}.xml
      - coverage_${GO_VERSION}.out
    reports:
      cobertura: coverage-unit_${GO_VERSION}.xml


sonarcloud-check:
  tags:
    - docker
  stage: ü§û test
  needs: [go-test-unit]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - merge_requests
    - master
    - develop

# ======================================================================================
# -- BUILD JOBS -------------------------------------------------------------------------
# ======================================================================================

# -- HUGO DOCUMENTATION
build-hugo-doc:
  tags:
    - docker
  stage: üì¶ build
  image: "golang:${GO_VERSION}"

  only:
    refs:
      - merge_requests
      - main
      - develop
    changes:
      - "**/*.md"
      - ".gitlab-ci.yml"

  before_script:
    - git submodule update --init hugo/themes/crunchy-hugo-theme
    - go get github.com/gohugoio/hugo
    - go install github.com/gohugoio/hugo

  script:
   # retrieve pg_featureserv version from go code
   - APP_VERSION=$(grep 'var setVersion string = ' internal/conf/appconfig.go| cut -d '"' -f 2)
   # update documentation version
   - echo "number = \"${APP_VERSION}\"" > hugo/data/version.toml
   - make docs

  artifacts:
    name: "pg_featureserv-documentation-${APP_VERSION}"
    expose_as: "pg_featureserv-documentation-latest"
    paths:
      - docs/
